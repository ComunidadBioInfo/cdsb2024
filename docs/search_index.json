[["index.html", "Desarrollo de paqueter√≠as de R/Bioconductor. Bienvenida 0.1 Instructores 0.2 Ayudantes 0.3 Temario 0.4 Patrocinadores 0.5 Licencia", " Desarrollo de paqueter√≠as de R/Bioconductor. Dra. Joselyn Cristina Ch√°vez-Fuentes, Dra. Mirna V√°zquez Rosas-Landa, M.C. Erick Cuevas-Fern√°ndez, Dra. Alejandra Medina-Rivera, Bienvenida Les damos la bienvenida al Workshop Desarrollo de paqueter√≠as de R/Bioconductor! En este taller aprender√°s cu√°les son los pasos cruciales para desarrollar un paquete de R y algunas buenas pr√°cticas para la generaci√≥n de c√≥digo. Con la integraci√≥n de estas herramientas, tendr√°s la oportunidad de crear tu primer paquete y contribuir a la comunidad de desarrolladores. Adicionalmente, aprender√°s a crear un sitio web para mostrar el funcionamiento de un paquete de R. 0.1 Instructores Dra. Joselyn Cristina Ch√°vez Fuentes: Estancia Postdoctoral en Icahn School of Medicine at Mount Sinai. Dra. Alejandra Medina Rivera: Investigadora Asociada en el Laboratorio Internacional de Investigaci√≥n de Medicina Gen√≥mica, UNAM. Dra. Yalbi I. Balderas-Mart√≠nez: Investigadora en el Instituto Nacional de Enfermedades Respiratorias Ismael Cos√≠o Villegas. Dra. Mirna V√°zquez Rosas Landa: Investigadora en el Instituto de Ciencias de Mar y Limnolog√≠a de la UNAM. M.C. Erick Cuevas Fern√°ndez: Estudiante de Doctorado en la Universidad Nacional Aut√≥noma de M√©xico. M.C. Jos√© Antonio Ovando Ric√°rdez: Estudiante de Doctorado en el Instituto Nacional de Enfermedades Respiratorias Ismael Cos√≠o Villegas. 0.2 Ayudantes Dra. Evelia Coss: Posdoctoral en el Laboratorio Internacional de Investigaci√≥n de Medicina Gen√≥mica, UNAM. M.C. Jos√© Antonio Ovando Ric√°rdez: Estudiante de Doctorado en el Instituto Nacional de Enfermedades Respiratorias Ismael Cos√≠o Villegas. 0.3 Temario Consulta el calendario de este curso en: https://bit.ly/calendarcdsb2024 D√≠a 1: Flujo de trabajo orientado a proyectos: Introducci√≥n al trabajo con proyectos de RStudio. Paths seguros. Control de versiones con GitHub y RStudio. Soluci√≥n de problemas con las versiones de paquetes de Rstudio. D√≠a 2: Creaci√≥n de paquetes de R/Bioconductor Parte I Infraestructura de un paquete de R/Bioconductor. Documentaci√≥n de funciones. Sesi√≥n social: Conociendo a la comunidad. Proyectos colaborativos Parte I. D√≠a 3: Creaci√≥n de paquetes de R/Bioconductor Parte II Dise√±o de pruebas. Creaci√≥n de vi√±etas. Compilaci√≥n e instalaci√≥n de paquetes. Proyectos colaborativos Parte II. D√≠a 4: Creaci√≥n de sitios web para la documentaci√≥n de paquetes de R Creaci√≥n de sitios web con pkgdown Proyectos colaborativos Parte III. Presentaci√≥n de proyectos. Clausura. 0.4 Patrocinadores Agradecemos a nuestros patrocinadores: 0.5 Licencia Este material posee una licencia tipo Creative Commons Attribution-ShareAlike 4.0 International License. Para conocer m√°s sobre esta licencia, visite http://creativecommons.org/licenses/by-sa/4.0/ "],["trabajando-con-proyectos-de-rstudio.html", "1 Trabajando con proyectos de RStudio 1.1 Diapositivas 1.2 ¬øQu√© es un proyecto de RStudio? 1.3 ¬øC√≥mo generamos un proyecto de RStudio? 1.4 ¬øPor qu√© usar proyectos de RStudio? 1.5 Algunos hacks! 1.6 Generando rutas seguras", " 1 Trabajando con proyectos de RStudio Joselyn Cristina Ch√°vez Fuentes 28 de octubre de 2024 1.1 Diapositivas div.grey { background-color: #bfbfbf; } div.center { text-align:center; } 1.2 ¬øQu√© es un proyecto de RStudio? Es un archivo especial de R, compatible con RStudio, que al ejecutarlo har√° 3 cosas: Abrir√° una nueva sesi√≥n de RStudio. Establecer√° la ubicaci√≥n del proyecto como tu directorio de trabajo. Establecer√° la ubicaci√≥n del proyecto como la ra√≠z de los archivos. 1.3 ¬øC√≥mo generamos un proyecto de RStudio? 1.3.1 Opci√≥n 1: Creando un proyecto en un directorio nuevo. En las opciones de RStudio Ve a File &gt; New project &gt; New Directory &gt; New Project. Asigna un nombre a tu proyecto, sin espacios y sin caracteres especiales. Selecciona la ubicaci√≥n donde crear√°s el nuevo directorio. Selecciona la opci√≥n Open in New Session. Oprime Create Project. 1.3.2 Opci√≥n 2: Creando un proyecto en un directorio existente. Crea un directorio en alguna ubicaci√≥n conocida de tu computadora. Asigna un nombre a tu directorio, sin espacios y sin caracteres especiales (Este ser√° el nombre de tu proyecto). En las opciones de RStudio ve a File &gt; New project &gt; Existing Directory. Selecciona la ubicaci√≥n donde previamente creaste el directorio. Selecciona la opci√≥n Open in New Session. Oprime Create Project. 1.4 ¬øPor qu√© usar proyectos de RStudio? Te permiten ser m√°s organizado y pasar de tener una ensalada de archivos a tener carpetas para cada secci√≥n del an√°lisis. Compartamentalizas tu trabajo al generar un proyecto espec√≠fico para cada an√°lisis. Te permiten trabajar con varios proyectos a la vez en sesiones independientes de RStudio, cada uno con sus propias variables, directorio de trabajo y archivos. Establece autom√°ticamente tu directorio de trabajo. En lugar de usar setwd() solamente requieres ejecutar el archivo .Rproj para abrir la sesi√≥n y trabajar en la ubicaci√≥n del proyecto. Puedes usar rutas relativas (y estables) a tus archivos, que seguir√°n funcionando sin importar en d√≥nde se ubique tu proyecto. Facilita el compartir y reproducir tu trabajo. No m√°s rutas al estilo ~/MiComputadora/MiFolder/MiArchivo. Comparte la carpeta completa de tu proyecto con todos los archivos necesarios y usa rutas relativas dentro del Rscript, por ejemplo ./datos. Nos ayuda a establecer colaboraciones y trabajar con plataformas de control de versiones. Actividad Comprueba algunas ventajas de usar proyectos de RStudio. Genera un nuevo proyecto de RStudio llamado ‚Äòmiproyecto‚Äô, recuerda que existen varias formas para hacerlo. Cierra la sesi√≥n y vuelve a abrirla ejecutando desde la terminal open miproyecto.Rproj o dando doble click sobre el archivo miproyecto.Rproj. Eval√∫a tu directorio de trabajo ejecutando en la consola de RStudio el comando getwd(). Cierra la sesi√≥n y mueve toda la carpeta de tu proyecto a otra ubicaci√≥n. Si lo creaste en Documentos mueve la carpeta al Escritorio o viceversa. Abre nuevamente el proyecto y verifica el directorio de trabajo, ¬øCambi√≥ el directorio de trabajo? Sin cerrar este proyecto, abre alguno de los proyectos que generaste previamente (por ejemplo directorioprevio.Rproj), recuerda que puedes seleccionar Open Project in New session 1.5 Algunos hacks! RStudio recuerda los proyectos con los que has trabajado recientemente. Ve a la esquina superior derecha y da click en la flecha junto al nombre de tu proyecto actual. Ver√°s todos los proyectos recientes. Si das click en el nombre de alguno de ellos te abrir√° el proyecto en la misma sesi√≥n, si das click en el recuadro con flecha blanca te abrir√° una nueva sesi√≥n con tu proyecto. Crea todos tus proyectos dentro de una carpeta principal y usa el buscador de archivos para acceder a ellos r√°pidamente. 1.6 Generando rutas seguras Se construyen a partir de una base estable El directorio de trabajo cambia de usuario a usuario y dependiendo de la ubicaci√≥n de los archivos. getwd() Deben funcionar en cualquier sistema operativo Una ruta en sistemas Linux se ve as√≠: &quot;/Users/joselynchavez/Documents/materiales_cdsb2024&quot; Mientras que una ruta en Windows se ve as√≠: &quot;C:\\Documents/materiales_cdsb2024&quot; 1.6.1 El paquete here Usemos el paquete here para detectar la ubicaci√≥n del proyecto: here::here() Ahora generemos una ruta segura a partir de la ra√≠z del proyecto here::here(&quot;mi_tabla.csv&quot;) here::here(&quot;subfolder&quot;, &quot;mi_tabla.csv&quot;) 1.6.2 Usando el paquete fs Por defecto, usa el directorio de trabajo actual como base y detecta el sistema operativo autom√°ticamente. fs::path(&quot;mi_tabla.csv&quot;) fs::path(&quot;subfolder&quot;, &quot;mi_tabla.csv&quot;) Tiene como ventaja que puede construir las rutas a partir del home del usuario. fs::path_home() fs::path_home(&quot;mi_tabla.csv&quot;) 1.6.3 Usando funciones base Si no deseas incluir el paquete ‚Äòhere‚Äô en las dependencias de tu paquete, puedes usar la funci√≥n file.path Esta funci√≥n usa como base el directorio de trabajo actual y detecta el sistema operativo para construir la ruta. file.path(&quot;mi_tabla.csv&quot;) file.path(&quot;subfolder&quot;, &quot;mi_tabla.csv&quot;) "],["control-de-versiones-con-github-y-rstudio.html", "2 Control de versiones con GitHub y RStudio 2.1 Diapositivas 2.2 ¬øPor qu√© hacer control de versiones de nuestros proyectos? 2.3 Git 2.4 Recomendaciones para sus proyectos 2.5 Proyectos colaborativos 2.6 GitHub 2.7 Manual de sobreviviencia con Git Y GitHub en RStudio (en caso de ser necesario) 2.8 C√≥mo clonar un repositorio y tener conecci√≥n/permisos para modificarlo? 2.9 Credenciales HTTPS en Cache 2.10 Conectando RStudio con Git y Github. 2.11 GitHub primero, RStudio despu√©s‚Ä¶ 2.12 Rmarkdown en GitHub 2.13 RStudio primero y GitHub tambi√©n 2.14 Proyecto existente, GitHub al final 2.15 Git basics: commands 2.16 Merge conflics 2.17 Merge conflics 2.18 En resumen", " 2 Control de versiones con GitHub y RStudio Dra. Alejandra Medina Rivera 28 de octubre de 2024 div.color { border-radius: 5px; padding: 20px; margin: 30px 0px 30px;} div.red { background-color:#f67155; } div.orange{ background-color:#f0BB51;} div.pair { display: flex; flex-direction: row; justify-content: center; text-align:center; padding:0px} div.inside { width: 49%; padding: 0px} div.scroll { max-height: 400px; overflow-y: auto; background: #111111; border-radius:5px; padding: 10px; margin: 30px 0px 30px; color: #999999;} div.alert{color:#bd475d; background-color:transparent} Este documento se basa en ‚ÄúHappy Git with R‚Äù de Jenny Bryan, los STAT 545 TAs, Jim Hester https://happygitwithr.com 2.1 Diapositivas 2.2 ¬øPor qu√© hacer control de versiones de nuestros proyectos? ‚úÖ Los proyectos suelen cambiar y crecer. üíæ Es d√≠ficil saber cu√°les fueron todos los cambios a lo largo del tiempo (en especial tiempos largos, hazlo por tu yo del futuro!). ü§î Las colaboraciones se pueden complicar sin un buen control de versiones. üîê Seguridad. 2.3 Git Git es un sistema de control de versiones Git funciona con GitHub, Bitbucket o GitLab ¬øPor qu√© usar Git en vez de solo renombrar los archivos? ‚úÖ‚úÖPor qu√© es mejor tener una filogenia del archivo. Git es un sistema de control de versiones distribuido, gratuito y de c√≥digo abierto, dise√±ado para manejar todo tipo de proyectos, desde los m√°s peque√±os hasta los m√°s grandes, con rapidez y eficiencia. Git es f√°cil de aprender y ocupa poco espacio con un rendimiento rapid√≠simo. Supera a las herramientas SCM como Subversion, CVS, Perforce y ClearCase con caracter√≠sticas como la ramificaci√≥n local barata, las c√≥modas √°reas de preparaci√≥n y los m√∫ltiples flujos de trabajo. 2.3.1 Git vs controles de versi√≥n a mano Con Git cada contribuidor tiene una copia del repositorio central, con todos los archivos y la historia de los cambios por los que han pasado. Excuse me, do you have a moment to talk about version control?, Jennifer Bryan, 2017 ‚ö†Ô∏è NO OLVIDES TENER INSTALADO Git, en caso de que a√∫n no lo hayas instalado, lo puedes descargar en el siguiente enlace https://git-scm.com/downloads. Para conocer la localizaci√≥n y la versi√≥n de Git que tienes en tu computadora, corre el siguiente comando en la terminal: which git y git --version 2.4 Recomendaciones para sus proyectos Dedicar un directorio Es mejor organizarlo en un RStudio Project Hacer un repositorio de Git Trabajen como siempre, solo adem√°s de guardar, recuerden hacer commit De vez en vez hagan push de sus cambios cuando los hayan verificado. 2.5 Proyectos colaborativos GitHub se parece m√°s a un GoogleDoc que a un Word Document. Es f√°cil que los colaboradores hagan cambios y tambi√©n es f√°cil saber qui√©n hizo que. El owner del proyecto puede dar permisos a los diferentes colaboradores. Tambi√©n existen organizaciones, esto puede ser √∫til para manejar los permisos de grupos grandes de colaboraci√≥n. 2.6 GitHub GitHub es una plataforma para guardar proyectos, hace uso de Git. Su principal utilidad es para generar c√≥digo fuente de programas. ‚ö†Ô∏è NO OLVIDES TENER UNA CUENTA EN GITHUB, en caso de que a√∫n no lo hayas hecho, puedes ir la p√°gina de GitHub y seleccionar join. Es indispensable tu usuario para los ejercicios que siguen. Tambi√©n existen otras plataformas como Bitbucked y GitLab, las cuales funcionan de manera similar a GitHub. 2.7 Manual de sobreviviencia con Git Y GitHub en RStudio (en caso de ser necesario) Por cualquier problema con la conexi√≥n entre RStudio y Git, siempre ten en cuenta la ubicaci√≥n de d√≥nde se instal√≥ Git. Puedes usar en la terminal which git (Mac y Linux) O bien usar en la terminal where git (Windows) Recuerda que la terminal (o l√≠nea de comandos √≥ consola √≥ shell √≥ bash) es un programa en tu computadora que funciona para correr otros programas. Desde RStudio puedes abrir la terminal, lo cual es muy conveniente si est√°s trabajando en un proyecto. Puedes abrir una terminal con: Tools &gt; Terminal (abre la terminal dentro del IDE de RStudio) Tools &gt; Shell (abre una terminal externa a RStudio) 2.8 C√≥mo clonar un repositorio y tener conecci√≥n/permisos para modificarlo? Git puede comunicarse con un servidor remoto usando uno de dos protocolos, HTTPS o SSH, y cada protocolo usa credenciales diferentes. La recomendaci√≥n actual de GitHub es usar HTTPS porque es la manera m√°s f√°cil de configurar y tiene operabilidad en multiples redes y plataformas. Es menos probable que HTTPS sea bloqueado por un firewall. Una conexi√≥n HTTPS permite que credential.helper almacene en cach√© su contrase√±a. (por tanto puedes configurar tu usuario y contrase√±a en tu equipo de uso) Es m√°s sencillo acceder a un repositorio desde cualquier lugar, ya que solo necesitas los detalles de tu cuenta (no se requieren claves SSH) para escribir en el repositorio. Usualmente cuando inicies un proyecto colaborativo con GitHub inicializa el ropositorio con un README. Copia el HTTPS URL para clonar el repositorio en la terminal git clone https://github.com/TU-USUARIO/TU-REPOSITORIO.git. 2.9 Credenciales HTTPS en Cache Para usar HTTPS debes crear un token de acceso personal, PAT (PERSONAL ACCESS TOKEN), esa ser√° tu credencial para HTTPS. Es una alternativa al uso de contrase√±as para la autenticaci√≥n en GitHub. Como precauci√≥n de seguridad, GitHub elimina autom√°ticamente los tokens de acceso personales que no se han usado durante un a√±o. ¬øC√≥mo crear un token? Ve a tu perfil de GitHub, dale click a la imagen de perfil (usualmente en la esquina superior derecha), y busca la opci√≥n de settings √≥ configuraci√≥n seg√∫n sea la configuraci√≥n de idioma que tengas. Da click a continuaci√≥n en Developer settings √≥ Par√°metros del desarrollador. En la barra lateral izquierda da click en Tokens de acceso personal. Haz click en Generar un nuevo token. As√≠gna un nombre descriptivo a tu token. Selecciona los alcances o permisos que deseas otorgarle a este token. Para usar tu token para acceder a repositorios desde la l√≠nea de comando, selecciona repo. (Recomendados: repo, user, workflow ) Finalmente haz click en generar token. Listo, copia y pega tu token en el lugar d√≥nde siempre lo puedas volver a copiar, ya que por razones de seguridad, una vez salgas de la p√°gina no podr√°s volver a ver el token. Nota: Preserva tus tokens de la misma manera que tus contrase√±as y no se las reveles a nadie. Una vez que tengas un token, puedes ingresarlo en lugar de tu contrase√±a cuando realices operaciones de Git a trav√©s de HTTPS. El punto final es que una vez configurada una PAT, varios paquetes de R, incluidos usethis y gh, podr√°n trabajar con la API de GitHub en su nombre, de forma autom√°tica. Por lo tanto, una PAT configurada correctamente significa que todo esto funcionar√° a la perfecci√≥n: - Operaciones HTTPS remotas a trav√©s de la l√≠nea de comando Git y, por lo tanto, a trav√©s de RStudio - Operaciones HTTPS remotas a trav√©s del paquete gert R y, por lo tanto, usethis - Operaciones de la API de GitHub a trav√©s del paquete gh R y, por lo tanto, usethis Probar el repositorio Clonado Despu√©s de hacer clone Usa estos comandos para verificar tu repositorio y revisar desde d√≥nde se est√° sincorinzando. cd myrepo ls -la head README.md git remote show origin Probemos haciendo un cambio en el README echo &quot;Something I want to add to the README in my local computer&quot; &gt;&gt; README.md git status Qu√© pas√≥? Ahora tenemos que decirle a git que queremos seguir los cambios de ese archivo Vamos a commit los cambios y luego a subir (push) los mismos a GitHub git add README.md git commit -m &quot;A commit from my local computer&quot; git push Recuerda tu TOKEN!! ¬øC√≥mo crear un token desde R? Puedes ir directamente a la p√°gina de GitHub a la parte para generar tu token de acceso personal mediante la siguiente funci√≥n: usethis::create_github_token() Y con las opciones que se mencionaban anteriormente puedes configurar y crear tu PAT. Si lo que quieres es especificar tu PAT en RStudio, las siguientes funciones te ser√°n √∫tiles: library(gitcreds) gitcreds_set() library(credentials) set_github_pat() Para eliminar credenciales utiliza la funci√≥n credentials::git_credential_forget() 2.9.1 Actividad Ejecuta los c√≥digos y genera tu PAT, recuerda no perderlo! 2.10 Conectando RStudio con Git y Github. Para lo que sigue a continuaci√≥n, deber√≠as tener esto: Tener una cuenta en GitHub R y RStudio actualizados Git instalado Saber que desde la terminal puedes hacer push y pull 2.11 GitHub primero, RStudio despu√©s‚Ä¶ Crea un repositorio en GitHub: mi_repositorio &gt; Public &gt; YES initialize this repository with a README &gt; clicken el gran bot√≥n verde ‚ÄúCreate repository‚Äù En RStudio crea un nuevo proyecto: File &gt; New Project &gt; Version Control &gt; Git. Ahi pega el URL del repositorio https://github.com/mi_usuario/mi_repositorio.git. Da click en Create Project. Esto nos generar√° los siguientes elementos: Un directorio nuevo Un repositorio Git enlazado a al repositorio de GitHub Un proyecto en RStudio Con este procedimiento ya no es necesario preocuparse por configurar controles remotos Git y rastrear ramas en la l√≠nea de comandos. 2.11.1 Actividad Genera un repositorio con el nombre que desees. Y con√©ctalo a RStudio. Cerciorate de que el archivo README se encuentre en tu nueva carpeta. Usa la funci√≥n usethis::use_r(\"titulo_de_un_script\") y observa lo que sucede. PAUSA ¬øC√≥mo comento y doy push/pull desde RStudio? 2.11.2 Comentar, pull y push Con la flecha azul podemos hacer pull (RECUERDA HACERLO ANTES DE HACER UN PUSH), y con la flecha verde un push. Para poder comentar y hacer push debemos marcar con una flechita mediante un click en las peque√±as cajas blancas de la columna Staged, damoc click en commit lo cual no abre la siguiente ventana. Volvemos a dar click en commit, y finalizamos con push (flecha verde). 2.12 Rmarkdown en GitHub Creemos un Rmakrdown y sub√°moslo a GitHub Ahora hay que agregarlo al repositorio (add), stage and commit. Subieron el hmlt? Qu√© tal se ve? No se ve como queremos, verdad? Para eso necesitamos recuperar el .md. El .md es un resultado intermedio de crear el html desde Rmd. Tenemos que cambiar el header para esto --- title: &quot;RmarkwondTest&quot; output: html_document: keep_md: true --- 2.12.1 Actividad Usa el c√≥digo dir.create(\"mis_imagenes\") en la consola de tu sesi√≥n de RStudio (la que est√° vinculada a tu repositorio). Ejecuta el siguiente c√≥digo quitando los #: install.packages(&quot;MASS&quot;) library (MASS) data(MASS::cats) # pdf(&quot;mis_imagenes/cats_plot.pdf&quot;) ggplot(cats, aes(x = Sex)) + geom_bar(fill = &quot;orange&quot;, color = &quot;black&quot;) + theme_classic() + xlab(&quot;Sexo&quot;) + ylab(&quot;N√∫mero de Gatos&quot;) + ggtitle(&quot;Gatos&quot;) # dev.off() Comenta y da push a los cambios que realizaste en el repositorio. 2.13 RStudio primero y GitHub tambi√©n Usa uno de los proyectos que hayas generado en las sesiones anteriores, PERO, que no est√© enlazado a GitHub. Ahora veremos como conectar un proyecto de R existente con GitHub. Realiza los pasos que hicimos en GitHub primero, RStudio despu√©s pero asegurate de crear un repositorio con un nuevo nombre. Y LISTO!! usa un simple ctrl + c, √≥ mv √≥ click derecho + copiar √≥ el m√©todo que prefieras para mover o copiar archivos. Copia los archivos de tu antig√ºo proyecto al proyecto nuevo. Solo haz commit y push y listo, lo que ten√≠a en tu antig√ºo proyecto ya est√° enlazado a GitHub. 2.14 Proyecto existente, GitHub al final Supongamos que tenemos un proyecto de R existente en alg√∫n lugar de nuestra computadora. NOTA: Para generar proyecto de RStudio desde la consola puedes utilizar el siguiente c√≥digo: usethis::create_project() O en RStudio con File &gt; New Project &gt; Existing Directory Si su proyecto ya es un proyecto de RStudio, ejec√∫telo. ¬øYa es un repositorio de Git? La presencia del panel de Git deber√≠a alertarlo. Si es as√≠, ha terminado. Sino este es el primer camino a seguir: Con el p√°quete usethis usa la funci√≥n usethis::use_git En RStudio ve a Tools &gt; Project Options &gt; Git/SVN. Dentro de Version control system, selecciona Git. Y da click a ‚ÄúYes‚Äù cuando aparezca ‚ÄúConfirm New Git Repository?‚Äù. Si usaste RStudio o usethis, el proyecto deber√≠a reiniciarse en RStudio. Hazlo tu mismo si hizo git init. RStudio ahora deber√≠a tener un panel Git. 2.14.1 Breviario cultural con los PATs Si usas el paquete usethis Y has configurado un token de acceso personal (PAT) de GitHub has esto en R: usethis::use_github() Esto crear√° un nuevo repositorio en GitHub, lo agregar√° como un control remoto, configurar√° una rama de seguimiento y lo abrir√° en su navegador. Lea la ayuda de use_github() para conocer sus argumentos y consejos sobre c√≥mo configurar una PAT. Esto es extremadamente √∫til para una variedad de flujos de trabajo que llaman a la API de GitHub. Considere configurar esto si usa usethis, devtools o gh con regularidad. Volviendo al tema de Proyecto existente, GitHub al final. Otra opci√≥n que se puede hacer para conectar un proyecto existen a GitHub es ir a hacer un repositorio a GitHub PERO ten en cuenta los siguientes cambios: Elije un nombre de repositorio; probablemente deber√≠a coincidir con el nombre de su proyecto y directorio local. NO inicialice este repositorio con un archivo README. Todo lo dem√°s es igual a los pasos que hac√≠amos en GitHub primero, RStudio despu√©s‚Ä¶ Ahora ve a tu proyecto de RStudio, has clic en los ‚Äúdos cuadros de color p√∫rpura y un cuadrado blanco‚Äù en el panel de Git. Has clic en ‚ÄúAgregar control remoto‚Äù. Pegue la URL aqu√≠ y elija un nombre remoto, casi con certeza el origin. Ahora ‚ÄúADD‚Äù. Pasado esto deberiamos volver en el cuadro de di√°logo ‚ÄúNew Branch‚Äù. Ingresa ‚Äúmaster‚Äù como el nombre de la rama y aseg√∫rate de que la opci√≥n ‚ÄúSync branch with remote‚Äù est√© marcada. Haz clic en ‚ÄúCreate‚Äù. En el siguiente cuadro de di√°logo elije ‚Äúoverwrite‚Äù. Ahora solo haz commit/pull/push y c√©rciorate que FUNCIONE!! 2.15 Git basics: commands Fetch Commits git fetch Create and Switch to a branch git branch [branch-name] git checkout [branch-name] 2.16 Merge conflics A veces, no tan a veces tambi√©n, las cosas no salen bien a la primera Merging (Fusionar) es una de esas cosas Cuando bajamos un cambio o fusionamos branches esto puede pasar. Primera regla: NO ENTRAR EN PANICO!!! Revisen el status del repositorio. Qu√© archivo tiene conflicto? 2.17 Merge conflics Abran ese archivo y busquen los problemas de merge. Es f√°cil, se ven as√≠: &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html &lt;div id=&quot;footer&quot;&gt;contact : email.support@github.com&lt;/div&gt; ======= &lt;div id=&quot;footer&quot;&gt; please contact us at support@github.com &lt;/div&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; issue-5:index.html Editen esa secci√≥n, dejen una versi√≥n final. Hagan commit y push Si entran en p√°nico? Aborten la misi√≥n! git merge --abort t 2.18 En resumen ¬°QUE LA FUERZA TE ACOMPA√ëE! "],["soluci√≥n-de-problemas-con-las-versiones-de-paquetes-de-rstudio.html", "3 Soluci√≥n de problemas con las versiones de paquetes de Rstudio 3.1 Diapositivas", " 3 Soluci√≥n de problemas con las versiones de paquetes de Rstudio Yalbi Balderas 28 de octubre de 2024 3.1 Diapositivas "],["creando-la-infraestructura-de-un-paquete.html", "4 Creando la infraestructura de un paquete 4.1 Diapositivas 4.2 Los primeros pasos 4.3 Checks 4.4 Modificando el archivo DESCRIPTION 4.5 Modificando el archivo NEWS", " 4 Creando la infraestructura de un paquete Joselyn Cristina Ch√°vez Fuentes 29 de octubre de 2024 4.1 Diapositivas 4.2 Los primeros pasos Revisar si podemos usar el nombre del paquete available::available(&quot;mipaquete&quot;) Crear la estructura inicial del paquete usethis::create_package(&quot;mipaquete&quot;) Podemos agregar la estructura de biocthis biocthis::use_bioc_pkg_templates() Pedir que Git ignore el archivo .Rproj usethis::use_git_ignore(&quot;*.Rproj&quot;) Crear el respositorio de GitHub usethis::use_github() Crear el archivo Description estilo Bioconductor biocthis::use_bioc_description() Crear el archivo README estilo Bioconductor biocthis::use_bioc_readme_rmd() devtools::build_readme() Recuerda guardar los cambios, hacer commit y push. Crear el archivo NEWS estilo Bioconductor biocthis::use_bioc_news_md() Crear los archivos de ayuda para usuarios y contribuidores biocthis::use_bioc_coc() usethis::use_tidy_contributing() biocthis::use_bioc_support() biocthis::use_bioc_issue_template() biocthis::use_bioc_citation() 4.3 Checks 4.3.1 BiocCheck BiocManager::install(&quot;BiocCheck&quot;) BiocCheck::BiocCheck() Algunas reglas de BiocCheck: Utilizar el s√≠mbolo &lt;- en lugar de = para definir funciones y variables. Utilizar TRUE y FALSE en lugar de T y F. Indentar el c√≥digo usando 4 espacios. Las l√≠neas de c√≥digo y documentaci√≥n no deben ser mayores a 80 caracteres. Las funciones deben tener 50 l√≠neas de c√≥digo o menos. El paquete debe contener al menos una vi√±eta. Al menos 80% de las funciones deben tener ejemplos reproducibles. Las dependencias deben ser declaradas en el archivo DESCRIPTION. El paquete debe tener al menos un biocView. El tama√±o del paquete no debe ser mayor 5Mb. El maintainer debe estar suscrito a la lista de correo de Bioconductor. El maintainer debe agregar su paquete en los tags de Bioconductor. 4.3.2 rcmdcheck install.packages(&quot;rcmdcheck&quot;) rcmdcheck::rcmdcheck() Algunas reglas de rcmdcheck: El paquete debe ser instalable. Los ejemplos de las funciones deben ser reproducibles. Las vi√±etas deben ser reproducibles. Todas las unidades de prueba deben pasar sin errores. El archivo DESCRIPTON debe tener el formato adecuado. 4.4 Modificando el archivo DESCRIPTION Paquete Este es el nombre del paquete. El nombre del repositorio y el nombre del paquete en la descripci√≥n deben coincidir (incluyendo may√∫sculas y min√∫sculas). T√≠tulo Este es un t√≠tulo breve pero descriptivo para el paquete. Versi√≥n Todos los paquetes de Bioconductor utilizan un esquema de versi√≥n x.y.z. Cuando se env√≠a por primera vez a Bioconductor, un paquete debe tener la versi√≥n 0.99.0. Se aplican las siguientes reglas: x es normalmente 0 para paquetes que a√∫n no han sido liberados. y es par para paquetes liberados, e impar para paquetes en desarrollo. Generalmente, no se debe aumentar este n√∫mero en el pre-release. z se incrementa siempre que se realizan cambios en el paquete. Descripci√≥n La descripci√≥n debe ser una visi√≥n general relativamente breve pero detallada de lo que implica la funcionalidad del paquete. Debe ser de al menos tres oraciones completas. Autores Se requiere una designaci√≥n de maintainer (cre) con una direcci√≥n de correo electr√≥nico que se mantenga activamente. Esta direcci√≥n de correo se utilizar√° para el contacto con respecto a cualquier problema que surja con el paquete en el futuro. Idealmente, se debe incluir el ORCiD por lo menos del maintainer. person(&quot;Lori&quot;, &quot;Shepherd&quot;, email = Lori.Shepherd@roswellpark.org, role = c(&quot;cre&quot;, &quot;aut&quot;), comment = c(ORCID = &quot;0000-0002-5910-4010&quot;)) S√≥lo debe figurar una persona como responsable para garantizar un √∫nico punto de contacto. Esta persona tendr√° acceso al repositorio git en git.bioconductor.org. El acceso a Commit puede ser dado a otros desarrolladores por solicitud en la lista de correo bioc-devel. Otra opci√≥n es a√±adir colaboradores al repositorio de GitHub. Este enfoque permite el desarrollo por muchos pero restringe el acceso a git.bioconductor.org. Licencia El campo de licencia debe referirse preferentemente a una licencia est√°ndar no restrictiva. Las licencias que restringen el uso, por ejemplo, a investigadores acad√©micos o sin fines de lucro, no son adecuadas para Bioconductor. Los paquetes de bioconductor b√°sico suelen estar licenciados bajo Artistic-2.0. El paquete debe contener s√≥lo c√≥digo que pueda ser redistribuido de acuerdo con la licencia del paquete. LazyData Para paquetes que incluyen datos, se recomienda NO incluir LazyData: TRUE. Incluirlo en ese caso, ralentiza la carga de paquetes con datos grandes. Dependencias Todos los paquetes deben estar disponibles a trav√©s de biocViews o CRAN de Bioconductor; el uso del campo Remotes: no es soportado, por lo tanto las dependencias s√≥lo disponibles en otros repositorios (e.g.¬†GitHub) no est√°n permitidas. Un paquete puede ser listado s√≥lo una vez entre Depends, Imports, Suggests, o Enhances: Imports: es para paquetes que proporcionan funciones, m√©todos o clases que se usan dentro del c√≥digo del paquete. La mayor√≠a de los paquetes est√°n listados aqu√≠. Depends: es para paquetes que proporcionan funcionalidad esencial para los usuarios del paquete, por ejemplo, el paquete GenomicRanges se enumera en el campo Depends: de GenomicAlignments. Es poco com√∫n que m√°s de tres paquetes aparezcan como Depends:. Suggests: es para paquetes usados en vi√±etas, ejemplos y c√≥digo condicional. Com√∫nmente, los paquetes de anotaciones y experimentos (por ejemplo, TxDb*) usados en vi√±etas y c√≥digo de ejemplo se incluyen en este campo, evitando as√≠ una descarga costosa. Enhances: es para paquetes como parallel que mejoran el rendimiento del paquete, pero no son estrictamente necesarios para su funcionalidad. En el caso de que se requiera una funci√≥n √∫nica externa para el c√≥digo del paquete, la disponibilidad y el uso del paquete pueden hacerse a trav√©s de: if (!requireNamespace(&#39;suggPKG&#39;, quietly = TRUE)) stop(&quot;Install &#39;suggPKG&#39; to use this function.&quot;) suggPKG::function() biocViews Este campo es obligatorio! Especifica al menos dos biocViews. Los t√©rminos deben provenir del mismo tipo de paquete (Software, AnnotationData, ExperimentData o Workflow). Puedes encontrar m√°s informaci√≥n en: https://www.bioconductor.org/packages/release/BiocViews.html BugReports Se recomienda apuntar hacia el repositorio de GitHub, por ejemplo: https://github.com/usuario/paquete/issues. URL Se incluyen los links importantes, como el repositorio con el c√≥digo fuente y el sitio web de pkgdown si se cuenta con √©l. Por ejemplo: https://github.com/usuario/paquete https://usuario.github.io/paquete 4.5 Modificando el archivo NEWS Secciones: New: Nuevas funciones. Bug fixes: Reparaci√≥n de errores en las funciones previas o en la documentaci√≥n. Changes: Cambios en el c√≥digo de las funciones, incluyendo modificaciones en los argumentos. Breaking changes: Cambios importantes que romper√≠an el c√≥digo en caso de no ser atendidos, por ejemplo el uso de funciones o argumentos antiguos. Enhancements: Mejoras a las funciones existentes. Formato El archivo NEWS se ve similar a este ejemplo: "],["creando-mis-primeras-funciones.html", "5 Creando mis primeras funciones 5.1 Diapositivas 5.2 Nombre de la funci√≥n 5.3 Estructura de la funci√≥n 5.4 ¬°Tu turno! 5.5 Argumentos 5.6 ¬°Tu turno! 5.7 Indentaci√≥n 5.8 Uso de espacios 5.9 Comentarios 5.10 Mensajes para el usuario", " 5 Creando mis primeras funciones Instructora: Joselyn Ch√°vez 29 de octubre de 2024 5.1 Diapositivas 5.2 Nombre de la funci√≥n Cortos pero descriptivos Recomendable: Separar las palabras con _ Establecer una palabra en com√∫n al inicio para familias de funciones use_bioc_citation() # es mejor que citation() bioc_cit() usebioccitation() useBiocCitation() use.bioc.citation() 5.3 Estructura de la funci√≥n Indentar las l√≠neas de c√≥digo. Agregar comentarios para separar/describir las secciones importantes. Usar la sintaxis paquete::funcion() cuando hacemos llamado a funciones de otros paquetes. usethis::use_r(&quot;subset_heatmap&quot;) Generemos el c√≥digo de manera regular. Simulemos una matriz con diversas mediciones y grafiquemos los datos en un heatmap. mi_matriz &lt;- matrix(rnorm(100), nrow = 10) rownames(mi_matriz) &lt;- paste0(&quot;medicion_&quot;,letters[1:10]) colnames(mi_matriz) &lt;- paste0(&quot;grupo_&quot;,letters[1:10]) library(ComplexHeatmap) Heatmap(mi_matriz, cluster_columns = FALSE, heatmap_legend_param = list(title = &quot;valores&quot;)) Escribamos una funci√≥n que permita seleccionar algunos grupos de inter√©s y genere el heatmap. No la mejor opci√≥n: library(ComplexHeatmap) subset_heatmap &lt;- function(x,mediciones=NULL,grupos=NULL) { x_subset &lt;- x[mediciones,grupos] Heatmap(mi_matriz, cluster_columns=FALSE, heatmap_legend_param=list(title=&quot;valores&quot;)) } Un poco mejor: library(ComplexHeatmap) subset_heatmap &lt;- function(x, mediciones = NULL, grupos = NULL) { x_subset &lt;- x[mediciones,grupos] Heatmap(mi_matriz, cluster_columns = FALSE, heatmap_legend_param = list(title = &quot;valores&quot;)) } Mucho mejor: subset_heatmap &lt;- function(x, mediciones = NULL, grupos = NULL) { # subset matrix x_subset &lt;- x[mediciones, grupos] # plot heatmap ComplexHeatmap::Heatmap( x_subset, cluster_columns = FALSE, heatmap_legend_param = list(title = &quot;valores&quot;)) } Ejecutemos la funci√≥n: subset_heatmap( mi_matriz, mediciones = c(&quot;medicion_a&quot;, &quot;medicion_b&quot;, &quot;medicion_c&quot;), grupos = c(&quot;grupo_d&quot;,&quot;grupo_e&quot;,&quot;grupo_f&quot;)) 5.4 ¬°Tu turno! Escribe una funci√≥n que: Filtre la matriz y mantenga s√≥lo los valores por encima de cierto valor. Genere el heatmap filtrado. Recuerda seguir las recomendaciones para escribir funciones. 5.5 Argumentos Los argumentos deben tener un nombre descriptivo y bien documentado. No la mejor opci√≥n: subset_heatmap &lt;- function(x, m, g) { # subset matrix x_subset &lt;- x[mediciones, grupos] } Una mejor opci√≥n: subset_heatmap &lt;- function(x, mediciones, grupos) { # subset matrix x_subset &lt;- x[mediciones, grupos] # plot heatmap ComplexHeatmap::Heatmap( x_subset, cluster_columns = FALSE, heatmap_legend_param = list(title = &quot;valores&quot;)) } Los argumentos generalmente deben tener valores default. subset_heatmap &lt;- function(x, mediciones = NULL, grupos = NULL, return_plot = TRUE) { # subset matrix x_subset &lt;- x[mediciones, grupos] # plot heatmap ComplexHeatmap::Heatmap( x_subset, cluster_columns = FALSE, heatmap_legend_param = list(title = &quot;valores&quot;)) } Eval√∫a la validez de los argumentos subset_heatmap &lt;- function(x, mediciones = NULL, grupos = NULL, return_plot = TRUE) { stopifnot(is.matrix(x)) # subset matrix x_subset &lt;- x[mediciones, grupos] # plot heatmap heatmap &lt;- ComplexHeatmap::Heatmap( x_subset, cluster_columns = FALSE, heatmap_legend_param = list(title = &quot;valores&quot;)) if(return_plot == TRUE) {return(heatmap)} } Este c√≥digo no debe funcionar: subset_heatmap( as.data.frame(mi_matriz), mediciones = c(&quot;medicion_a&quot;, &quot;medicion_b&quot;, &quot;medicion_c&quot;), grupos = c(&quot;grupo_d&quot;,&quot;grupo_e&quot;,&quot;grupo_f&quot;)) Nota: Usa las funciones is() para evaluar la clase de los objects, no uses class() == ni class() !=. Proporciona pistas para entender los errores. subset_heatmap &lt;- function(x, mediciones = NULL, grupos = NULL, return_plot = TRUE) { if(!is.matrix(x)) {stop(&quot;x debe ser una matriz&quot;)} # subset matrix x_subset &lt;- x[mediciones, grupos] # plot heatmap heatmap &lt;- ComplexHeatmap::Heatmap( x_subset, cluster_columns = FALSE, heatmap_legend_param = list(title = &quot;valores&quot;)) if(return_plot == TRUE) {return(heatmap)} } Este c√≥digo debe dar un error, m√°s un mensaje de ayuda. subset_heatmap( as.data.frame(mi_matriz), mediciones = c(&quot;medicion_a&quot;, &quot;medicion_b&quot;, &quot;medicion_c&quot;), grupos = c(&quot;grupo_d&quot;,&quot;grupo_e&quot;,&quot;grupo_f&quot;)) 5.6 ¬°Tu turno! Agrega pasos de evaluaci√≥n para los otros argumentos de la funci√≥n. Incluye mensajes de ayuda cuando el formato de los argumentos no es el esperado. 5.7 Indentaci√≥n Usa 4 espacios para indentar, evita los tabs. No uses l√≠neas de m√°s de 80 caracteres. 5.8 Uso de espacios Usa un espacio despu√©s de la coma: a, b, c. Usa espacio despu√©s de operadores binarios: a == b. 5.9 Comentarios Usa ‚Äú##‚Äù para comenzar las l√≠neas de comentarios. Los comentarios deben usarse como notas y documentaci√≥n solamente. No dejes c√≥digo comentado que no se va a usar. Evita los TODO‚Äôs comentados cuando vayas a publicar el paquete. 5.10 Mensajes para el usuario Si deseas imprimir mensajes para el usuario, como el progreso del an√°lisis en la funci√≥n o advertir sobre los valores de los argumentos, evita el uso de cat(), mejor usa: message() comunica mensajes diagn√≥stico, como el progreso de la funci√≥n. message(&quot;Paso 1: completo&quot;) ## Paso 1: completo warning() comunica situaciones inusuales que pueden ser manejadas por tu c√≥digo. warning(&quot;El n√∫mero de elementos esperados es mayor a uno, se tomar√° el primer valor del vector&quot;) ## Warning: El n√∫mero de elementos esperados es mayor a uno, se tomar√° el primer ## valor del vector stop() indica una condici√≥n err√≥nea. stop(&quot;x debe ser num√©rico&quot;) "],["documentaci√≥n-de-funciones.html", "6 Documentaci√≥n de funciones 6.1 Diapositivas 6.2 Links importantes: 6.3 ¬øQu√© es la documentaci√≥n de una funci√≥n y por qu√© es importante? 6.4 Generacion de la documentacion con ayuda del paquete roxygen 6.5 Antes de empezar‚Ä¶‚úèÔ∏è 6.6 Generacion de un bloque de documentacion con ayuda del paquete roxygen. 6.7 Otros campos de la documentacion.", " 6 Documentaci√≥n de funciones Instructor/a: 29 de octubre de 2024 6.1 Diapositivas 6.2 Links importantes: Esta lecci√≥n est√° basada en algunos manuales sobre documentaci√≥n: Una vi√±eta del cranproject El manual de paqutes de r En esta vi√±eta de cranproject 6.3 ¬øQu√© es la documentaci√≥n de una funci√≥n y por qu√© es importante? üôáÔ∏è Es la informaci√≥n complementaria que el desarrollador escribe sobre una funci√≥n y que se accede con ? seguido el nombre de una funci√≥n actual de un paquete p.ej. ?unafuncion. üìÅ La documentaci√≥n se almacena como un archivo .Rd (‚ÄúR documentation) en la carpeta man/. üîé La documentaci√≥n usa una s√≠ntesis especial, que es distinta a la de r y que est√° ligeramente basada en LaTeX. üìÑ Se puede renderizar como html, pdf o texto sin formato seg√∫n se necesite. 6.4 Generacion de la documentacion con ayuda del paquete roxygen En un paquete de r y en cualquier ecosistema de devtools no editamos un documento .Rd manualmente. La documentaci√≥n usa una s√≠ntesis parecida a LaTex que puede ser f√°cil de estropear. Por ventaja existen paquetes como roxigen2. Usar roxigen nos permite usar comentarios especiales sobre el inicio de la funci√≥n, esto nos da un par de ventajas: ‚úÖ La documentaci√≥n y la funci√≥n estar√°n en un mismo lugar, por lo que si editas la funci√≥n ser√° mas f√°cil recordar actualizar la documentcion tambi√©n. üéâ Puedes usar markdown en lugar de la s√≠ntesis especial para los archivos .Rd 6.5 Antes de empezar‚Ä¶‚úèÔ∏è Vamos a crear un funci√≥n para nuestro paquete. Supongamos que para nuestro paquete necesitamos una funci√≥n que calcule la moda. Esta es una forma sencilla de calcular la moda: getmode &lt;- function(serievector) { uniqv &lt;- unique(serievector) uniqv[which.max(tabulate(match(serievector, uniqv)))] } unique(serievector): Crea un vector que contiene √∫nicamente los valores √∫nicos de la serie de n√∫meros serievector. match(serievector, uniqv): Encuentra la posici√≥n de cada valor de serievector en el vector √∫nico uniqv. tabulate(match(serievector, uniqv)): Cuenta cu√°ntas veces aparece cada valor en la serie serievector. which.max(tabulate(match(serievector, uniqv))): Encuentra el √≠ndice del valor m√°ximo en el vector de frecuencias. uniqv[which.max(tabulate(match(serievector, uniqv)))]: Devuelve el valor correspondiente al √≠ndice calculado, que es la moda. Creamos un ejemplo para ver que funcione: serie_numeros &lt;- c(1, 2, 2, 2, 2, 3, 3, 4, 4, 4) resultado &lt;- getmode(serie_numeros) print(resultado) ## [1] 2 Bien ahora si podemos podemos empezar a usar el paquete de roxygen para documentar nuestra funci√≥n.. comencemos. 6.6 Generacion de un bloque de documentacion con ayuda del paquete roxygen. Podemos insertar un esqueleto de comentarios de roxygen para ver su s√≠ntesis. Colocamos el cursor en alg√∫n lugar de la definici√≥n de nuestra funci√≥n y buscamos en la pesta√±a C√≥digo &gt; Insertar Roxygen Skeleton. #&#39; Title #&#39; #&#39; @param serievector #&#39; #&#39; @return #&#39; @export #&#39; #&#39; @examples getmode &lt;- function(serievector) { uniqv &lt;- unique(serievector) uniqv[which.max(tabulate(match(serievector, uniqv)))] } Ahora ya tenemos un esqueleto de la documentaci√≥n que nos da una ventaja para su creaci√≥n. Las l√≠neas de comentarios de Roxygen siempre comienzan con #', el habitual para un comentario # mas un ' Veamos los comentarios de uno por uno: Empezamos con el titulo. Se sugiere poner en el titulo las acciones principales que realiza la funci√≥n en este caso por ejemplo podremos usar: #&#39; @title Encontrar la Moda de una Serie de N√∫meros #&#39; #&#39; @param serievector #&#39; #&#39; @return #&#39; @export #&#39; #&#39; @examples getmode &lt;- function(serievector) { uniqv &lt;- unique(serievector) uniqv[which.max(tabulate(match(serievector, uniqv)))] } Muy bien!. El siguiente comentario que podemos ver es @param. Pero antes, vamos a a√±adir una peque√±a descripci√≥n de la funci√≥n y como usarla. Primero a√±adimos la peque√±a descripci√≥n con @description: #&#39; @title Encontrar la Moda de una Serie de N√∫meros #&#39; #&#39; @description Esta funci√≥n lee una serie de n√∫meros en forma de vector y #&#39; encuentra el elemento que mas se repite, es decir la moda. #&#39; @param serievector #&#39; #&#39; @return #&#39; @export #&#39; #&#39; @examples getmode &lt;- function(serievector) { uniqv &lt;- unique(serievector) uniqv[which.max(tabulate(match(serievector, uniqv)))] } Ahora vamos a a√±adir el comentario @usage que nos indica como puedes mandar a llamar la funci√≥n. #&#39; @title Encontrar la Moda de una Serie de N√∫meros #&#39; #&#39; @description Esta funci√≥n lee una serie de n√∫meros en forma de vector y #&#39; encuentra el elemento que mas se repite, es decir la moda. #&#39; @usage getmode(serievector) #&#39; @param serievector #&#39; #&#39; @return #&#39; @export #&#39; #&#39; @examples getmode &lt;- function(serievector) { uniqv &lt;- unique(serievector) uniqv[which.max(tabulate(match(serievector, uniqv)))] } Ahora si vamos a a√±adir una peque√±a descripci√≥n de nuestros argumentos. Si tuvi√©ramos mas de un par√°metro en nuestra funci√≥n podr√≠amos llamar las veces que sea necesario el comentario de par√°metro con @param, veamoslo. Ahora a√±adimos una peque√±a descripci√≥n a nuestro √∫nico par√°metro que es serievector: #&#39; @title Encontrar la Moda de una Serie de N√∫meros #&#39; #&#39; @description Esta funci√≥n lee una serie de n√∫meros en forma de vector y #&#39; encuentra el elemento que mas se repite, es decir la moda. #&#39; #&#39; @param serievector Es una serie de n√∫meros en forma de un vector simple de r. #&#39; #&#39; @return #&#39; @export #&#39; #&#39; @examples getmode &lt;- function(serievector) { uniqv &lt;- unique(serievector) uniqv[which.max(tabulate(match(serievector, uniqv)))] } Despu√©s, podemos a√±adir un comentario de detalles de la funci√≥n con @details. Por ejemplo, si en nuestro ejemplo tuvi√©ramos ciertos valores no num√©ricos en nuestro vector de entrada, por ejemplo letras, ¬ønuestra funci√≥n podr√≠a leerlas?, o si le di√©ramos un vector sin caracteres ¬øque pasar√≠a?, veamos: serie_numeros &lt;- c(0,2,2,&quot;d&quot;, &quot;d&quot;,&quot;d&quot;) resultado &lt;- getmode(serie_numeros) print(resultado) ## [1] &quot;d&quot; serie_numeros &lt;- c() resultado &lt;- getmode(serie_numeros) print(resultado) ## NULL Entonces, esto es un ejemplo de lo que podr√≠amos poner en el comentario @details. Hagamoslo describiendo esto. En details podemos agregar detalles un poco mas espec√≠ficos que en la descripci√≥n de la funci√≥n #&#39; @title Encontrar la Moda de una Serie de N√∫meros #&#39; #&#39; @description Esta funci√≥n lee una serie de n√∫meros en forma de vector y #&#39; encuentra el elemento que mas se repite, es decir la moda. #&#39; #&#39; @param serievector Es una serie de n√∫meros en forma de un vector simple de r. #&#39; #&#39; @details si tu vector de entrada puede ser interpretado alternando n√∫meros y #&#39; letras escritas entre comillas &quot;&quot;. Si un vector esta vac√≠o, dar√° como #&#39; resultado un NULL. #&#39; @return #&#39; @export #&#39; #&#39; @examples getmode &lt;- function(serievector) { uniqv &lt;- unique(serievector) uniqv[which.max(tabulate(match(serievector, uniqv)))] } Ya casi terminamos de llenar nuestra documentaci√≥n, pero antes vamos a ver algunos otros arrobas que pudieran ser importantes. El @import e @importfrom importan funciones de otros paquetes en caso de que las necesitemos, el primero importa todas las funciones del paquete que que solicites, y el segundo importa solo algunas funciones especificas. En nuestra funci√≥n no necesitamos llamar funciones de otros paquetes puesto que todas las que usamos est√°n en r base. Pero imaginemos que tu funci√≥n, por ejemplo necesita leer un archivo .tsv con la funci√≥n read_tsv del paquete readr y despu√©s reconvertir la tabla resultante en un archivo con write.table pero solo necesitas esa funci√≥n del paquete utils, entonces har√≠amos: #&#39; @title Encontrar la Moda de una Serie de N√∫meros #&#39; #&#39; @description Esta funci√≥n lee una serie de n√∫meros en forma de vector y #&#39; encuentra el elemento que mas se repite, es decir la moda. #&#39; #&#39; @param serievector Es una serie de n√∫meros en forma de un vector simple de r. #&#39; #&#39; @details si tu vector de entrada puede ser interpretado alternando n√∫meros y #&#39; letras escritas entre comillas &quot;&quot;. Si un vector esta vac√≠o, dar√° como #&#39; resultado un NULL. #&#39; @import readr #&#39; @importFrom utils write.table #&#39; @return #&#39; @export #&#39; #&#39; @examples getmode &lt;- function(serievector) { uniqv &lt;- unique(serievector) uniqv[which.max(tabulate(match(serievector, uniqv)))] } As√≠ podemos importar las funciones que necesitemos de otros paquetes y se incluir√°n en la documentaci√≥n y se cargaran autom√°ticamente al cargar tu paquete. :eyes::exclamation: Para un correcto funcionamiento de tu paquete y al estar los paquetes necesarios incluidos en la documentaci√≥n, no ser√° necesario llamarlos de la forma ``library(‚Äúapackage‚Äù)```. Entonces llegamos a la secci√≥n @return. Esta descripci√≥n le servir√° al usuario del paquete para conocer cual sera el resultado de la funci√≥n, que puede ser un archivo, una tabla, un numero,etc. Entonces retomando la funci√≥n que usamos al inicio, vamos a escribir una descripci√≥n corta del resultado de la funci√≥n getmode(). #&#39; @title Encontrar la Moda de una Serie de N√∫meros #&#39; #&#39; @description Esta funci√≥n lee una serie de n√∫meros en forma de vector y #&#39; encuentra el elemento que mas se repite, es decir la moda. #&#39; #&#39; @param serievector Es una serie de n√∫meros en forma de un vector simple de r. #&#39; #&#39; @details si tu vector de entrada puede ser interpretado alternando n√∫meros y #&#39; letras escritas entre comillas &quot;&quot;. Si un vector esta vac√≠o, dar√° como #&#39; resultado un NULL. #&#39; @return El car√°cter con mas frecuencia de el vector de entrada. #&#39; @export #&#39; #&#39; @examples getmode &lt;- function(serievector) { uniqv &lt;- unique(serievector) uniqv[which.max(tabulate(match(serievector, uniqv)))] } Por ultimo tenemos @export que es el encargado de renderizar la documentaci√≥n para que pueda aparecer en la ventana de Ayuda (abajo a la derecha). esta opci√≥n la dejamos para funciones principales que el usuario va a utilizar, aunque puede que existan alguna funciones internas que no queremos que el usuario vea. En ese caso vamos a usar @noRd en lugar de este. Antes de terminar podemos incluir ejemplos de como funciona nuestra funci√≥n para un mejor entendimiento, pongamos los que ya realizamos: #&#39; @title Encontrar la Moda de una Serie de N√∫meros #&#39; #&#39; @description Esta funci√≥n lee una serie de n√∫meros en forma de vector y #&#39; encuentra el elemento que mas se repite, es decir la moda. #&#39; #&#39; @param serievector Es una serie de n√∫meros en forma de un vector simple de r. #&#39; #&#39; @details si tu vector de entrada puede ser interpretado alternando n√∫meros y #&#39; letras escritas entre comillas &quot;&quot;. Si un vector esta vac√≠o, dar√° como #&#39; resultado un NULL. #&#39; @return El car√°cter con mas frecuencia de el vector de entrada. #&#39; @export #&#39; #&#39; @examples #&#39; serie_n√∫meros &lt;- c(1, 2, 2, 2, 2, 3, 3, 4, 4, 4) #&#39; resultado &lt;- getmode(serie_n√∫meros) #&#39; print(resultado) getmode &lt;- function(serievector) { uniqv &lt;- unique(serievector) uniqv[which.max(tabulate(match(serievector, uniqv)))] } Ahora si, una vez teniendo listo el bloque de comentarios para la documentaci√≥n, vamos a ejecutar devtools::load_all() para cargar nuestras funciones y hecho esto, ejecutamos devtools::document() o presionamos Ctrl/Cmd + Shift + D para convertir los comentarios en archivo .Rd y poder renderizarlo. üíØ Listo, tenemos nuestra documentaci√≥n para una funci√≥n. As√≠ se ver√° cuando el paquete est√© terminado. 6.7 Otros campos de la documentacion. @seealso para indicar funciones relacionadas y facilitar la b√∫squeda de funciones. @references a√±ade algunas referencias. @author para especificar el autor de la funci√≥n. "],["dise√±o-de-pruebas.html", "7 Dise√±o de pruebas 7.1 Diapositivas", " 7 Dise√±o de pruebas Mirna V√°zquez Rosas-Landa 30 de octubre de 2024 7.1 Diapositivas "],["creaci√≥n-de-vi√±etas.html", "8 Creaci√≥n de vi√±etas 8.1 ¬øQu√© es una vi√±eta/vignette? üìù‚ú® 8.2 Caracter√≠sticas de una vignette üåü 8.3 ¬øC√≥mo consultar la vi√±eta de un paquete? ‚ùìüîç 8.4 ¬øC√≥mo crear una vi√±eta? ‚ùìüîç 8.5 ¬øC√≥mo guardar y actualizar la vi√±eta? üîÑüíª 8.6 Veamos un ejemplo üîçüë®‚Äçüíª 8.7 Actividad", " 8 Creaci√≥n de vi√±etas Jos√© Antonio Ovando Ric√°rdez 30 de octubre de 2024 8.1 ¬øQu√© es una vi√±eta/vignette? üìù‚ú® Es una gu√≠a extendida sobre c√≥mo funciona el paquete. Es recomendable que muestre c√≥mo utilizar las funciones del paquete, aplicado en un flujo de trabajo; por ejemplo: el an√°lisis estad√≠stico de una encuesta üìä o el an√°lisis de expresi√≥n diferencial de genes. Podemos estructurarlo como har√≠amos con la escritura de un cap√≠tulo de libro o de un art√≠culo cient√≠fico: debe mostrar el problema a resolver y la metodolog√≠a paso a paso sobre c√≥mo el paquete lo resuelve. Si el paquete contiene funciones que se complementan entre s√≠ para alcanzar un fin espec√≠fico, entonces debes mostrar su uso de forma compartamentalizada. 8.2 Caracter√≠sticas de una vignette üåü Debe mostrar un flujo de an√°lisis explotando el potencial de tu paquete üìäüöÄ. Implementa tantas funciones de tu paquete como sea posible, pero no es necesario que incluya todas üõ†Ô∏è‚ú®. Los datos a usar deben ser peque√±os o f√°ciles de acceder üìÇüîç. Puedes crear m√∫ltiples vi√±etas para mostrar diferentes casos de an√°lisis y cubrir una mayor cantidad de funciones üìùüìö. 8.3 ¬øC√≥mo consultar la vi√±eta de un paquete? ‚ùìüîç browseVignettes(package = &quot;ggplot2&quot;) 8.4 ¬øC√≥mo crear una vi√±eta? ‚ùìüîç biocthis::use_bioc_vignette(&quot;mi_vignette&quot;) Esta funci√≥n tendr√° tres efectos ‚ú®: Generar el directorio vignettes en caso que no exista üìÇüîß. Agregar dependencias en el archivo DESCRIPTION (por ejemplo, knitr necesario para construir vi√±etas dentro del paquete) üìÑüì¶. Abrir un template en formato .Rmd para comenzar a escribir la vi√±eta, que se va a guardar en vignettes/mi_vignette.Rmd üìùüíæ. 8.5 ¬øC√≥mo guardar y actualizar la vi√±eta? üîÑüíª Una vez que se ha generado el archivo vignettes/mi_vignette.Rmd, se hacen las modificaciones necesarias. Puedes usar el comando: edit_file(&quot;vignettes/mi_vignette.Rmd&quot;) Para guardar los cambios, debes hacer clic en el bot√≥n Knit o utiliza la combinaci√≥n de teclas Ctrl/Cmd-Shift-K üíæ‚ú®. 8.6 Veamos un ejemplo üîçüë®‚Äçüíª Busca la vi√±eta del paquete regutools en la p√°gina de Bioconductor üåê: Vi√±eta de regutools en Bioconductor üì¶üìÑ 8.7 Actividad 8.7.1 Ejercicio 1: Identificaci√≥n de vi√±etas en paquetes de inter√©s en Bioconductor üìöüîç En equipos selecciona dos paquetes almacenados en Bioconductor que sean de tu inter√©s y responde las siguientes preguntas: ¬øAmbos paquetes incluyen vi√±etas? üìù‚ùì ¬øQu√© aspectos de la vi√±eta del paquete A versus el paquete B te llaman m√°s la atenci√≥n? üîçü§î ¬øConsideras que alguna vi√±eta est√° mejor desarrollada que la otra? Explica por qu√© üí≠üìä. 8.7.2 Ejercicio 2: Creaci√≥n de vi√±etas en R üõ†Ô∏èüìÑ Pasos: 1. Cargar los paquetes necesarios library(usethis) library(biocthis) Crear un nuevo paquete de R (si no tienes uno ya creado) # usethis::create_package(&quot;CDSB2024&quot;) Configurar el paquete para Bioconductor Ejecuta el siguiente comando para configurar el paquete con las mejores pr√°cticas de Bioconductor: # biocthis::use_bioc_pkg_templates() Esto agregar√° varios archivos de configuraci√≥n y plantillas √∫tiles para trabajar con Bioconductor. Crear una vi√±eta con biocthis Ejecuta el siguiente comando para agregar una vi√±eta en formato R Markdown. Cambia ‚Äúmi_vignette‚Äù por el t√≠tulo de la vi√±eta que prefieran. # usethis::use_vignette(&quot;mi_vignette_usethis&quot;) # biocthis::use_bioc_vignette(&quot;mi_vignette_biocthis&quot;) Esto crear√° un archivo R Markdown en la carpeta vignettes/ dentro del paquete. Editar la vi√±eta Abre el archivo creado en vignettes .Rmd. Incluye contenido que describa una funci√≥n del paquete. Abrir la vi√±eta en el navegador y renderiza el archivo .Rmd # browseVignettes(&quot;CDSB2024&quot;) 8.7.3 Preguntas de Reflexi√≥n ü§îüí≠ ¬øCu√°l es la ventaja de documentar ejemplos de uso en una vi√±eta? üìö‚ú® ¬øQu√© estructura consideras √∫til para presentar ejemplos en una vi√±eta? üèóÔ∏èüîç ¬øC√≥mo aplicar√≠as esta clase en tu proyecto colaborativo? ü§ùüìà "],["compilaci√≥n-e-instalaci√≥n-de-paquetes.html", "9 Compilaci√≥n e instalaci√≥n de paquetes 9.1 Diapositivas 9.2 Metadatos de una paqueter√≠a 9.3 Licencias 9.4 Paqueter√≠as de c√≥digo fuente 9.5 ¬øEn d√≥nde podemos encontrar el c√≥digo fuente de un paquete? 9.6 Instalando la √∫ltima versi√≥n en desarrollo 9.7 Instalando paquetes desde GitHub 9.8 Instalando un paquete local 9.9 Contribuyendo c√≥digo", " 9 Compilaci√≥n e instalaci√≥n de paquetes Joselyn Cristina Ch√°vez Fuentes 30 de octubre de 2024 9.1 Diapositivas 9.2 Metadatos de una paqueter√≠a Los metadatos de la paqueter√≠a se encuentran en el archivo DESCRIPTION. 9.2.1 Description El campo Description describe lo que hace tu paqueter√≠a. Suele ser extenso, si requieres escribir m√∫ltiples l√≠neas, deben estar indentadas. Por ejemplo: # Description: Este paquete contiene todas las funciones generadas en el curso # de escritura de paqueter√≠as en R. Tambi√©n contiene las funciones que cada # participante propuso para solucionar un problema relacionado con su trabajo. 9.2.2 Dependencias Las dependencias son las paqueter√≠as que tu paquete necesita para funcionar. La lista de paquetes se escribe separada por comas y es recomendado que se escriban en orden alfab√©tico. Existen tres tipos: Imports: Son paquetes que deben instalarse para que tu paquete funcione y por tanto se van a instalar en el momento que instales el paquete. Internamente existe una funci√≥n que eval√∫a si los paquetes se encuentran instalados o no y solamente instala los faltantes. Esta dependencia hace solamente la instalaci√≥n pero no ejecuta library(), por lo que los paquetes requeridos deber√°n ser cargados dentro de la escritura del paquete. Depends: Son paquetes que obligatoriamente deben estar para que tu paqueter√≠a funcione pero no se instalar√°n de manera autom√°tica. Aqu√≠ tambi√©n se indica la versi√≥n de R requerida para el funcionamiento del paquete. Los paquetes que se listen aqu√≠ se van a cargar al mismo tiempo que se ejecute el library(mipaquete). Suggests: Se refiere a los paquetes que tu paquete puede utilizar y aprovechar para ser m√°s poderoso en el an√°lsis pero no los necesita para funcionar. Por ejemplo, paquetes que contienen sets de datos para hacer pruebas o an√°lisis de pr√°ctica. Nota Importante Se recomienda listar los paquetes necesarios para el funcionamiento de nuestro paquete en Imports porque cuando se ponen en Depends se cargan los paquetes completos y probablemente solamente requerimos una o dos funciones. Cargar demasiados paquetes completos, sin ser necesario, s√≥lo hace que nuestro paquete se vuelva pesado y lento. Es mejor llamar particularmente a las funciones usando la sintaxis expl√≠cita: Biostrings::translate() 9.2.3 ¬øC√≥mo a√±adir dependencias? Usando usethis: usethis::use_package(&quot;ggplot2&quot;, type = &quot;Imports&quot;) Editando manualmente el archivo DESCRIPTION. 9.3 Licencias Establece qui√©n puede usar tu paquete. Existen diversas licencias pero hablaremos sobre las 3 m√°s comunes: MIT (Massachusetts Institute of Technology): es simple y permisiva. Permite a cualquier persona usar y distribuir tu paqueter√≠a con una sola restricci√≥n: la distribuci√≥n debe incluir la declaraci√≥n de licencia del autor. Existe un texto base al cual se le pueden a√±adir cl√°usulas o excepciones. Este es un ejemplo: GPL-2 (General Public License): Permite usar y distribuir tu c√≥digo con la condici√≥n que si se genera una versi√≥n modificada de tu c√≥digo, su distribuci√≥n debe ser tambi√©n bajo esta licencia. Aunque est√° enfocada a la distribuci√≥n de c√≥digo abierto, permite dejar en claro qui√©n es el autor del material y evitar la apropiaci√≥n del c√≥digo por terceros. Un ejemplo de la aplicaci√≥n de esta licencia es el desarrollo de Linux. CCO: Esta licencia implica que cedes todos los derechos y el c√≥digo puede ser utilizado con cualquier fin, excepto fines comerciales. Es el m√°s utilizado en los paquetes. Concede el derecho a utilizar y distribuir el material sin requerir el permiso del autor. 9.4 Paqueter√≠as de c√≥digo fuente En algunas ocasiones necesitaremos instalar paquetes que no se encuentran compilados, por ejemplo: Paquetes en desarrollo de CRAN o Bioconductor. Versiones anteriores de paquetes de CRAN o Bioconductor. Paquetes que no se encuentran depositados en CRAN o Bioconductor, sino en repositorios personales como GitHub. Paquetes que est√°s desarrollando de forma local. El paquete remotes ser√° de gran utilidad. Regularmente, los paquetes que instalamos desde alg√∫n repositorio como CRAN o Bioconductor son paquetes binarios que ya se encuentran compilados previamente. Existen algunas funciones que nos permiten instalar paquetes desde c√≥digo fuente. Anteriormente, se sol√≠an utilizar las funciones install_* del paquete devtools; sin embargo, recientemente se cre√≥ el paquete remotes que contiene las mismas funciones pero est√° espec√≠ficamente dise√±ado para ayudarnos a trabajar con paquetes desde c√≥digo fuente. 9.5 ¬øEn d√≥nde podemos encontrar el c√≥digo fuente de un paquete? Si el paquete se encuentra disponible en CRAN, puedes encontrar el link al c√≥digo fuente en la secci√≥n URL. Si el paquete se encuentra disponible en Bioconductor, puedes encontrar el link al c√≥digo fuente en la secci√≥n Package Archives Si el paquete se encuentra en GitHub o GitLab, necesitar√°s conocer el nombre de usuario y el nombre del paquete. 9.6 Instalando la √∫ltima versi√≥n en desarrollo Si el paquete se encuentra depositado en CRAN podemos usar la funci√≥n remotes::install_dev(&quot;pkgname&quot;) Por ejemplo, para instalar la versi√≥n en desarrollo de dplyr usaremos el comando remotes::install_dev(&quot;dplyr&quot;) Si el paquete se encuentra en Bioconductor usaremos la siguiente funci√≥n: remotes::install_bioc(&quot;pkgname&quot;) Por ejemplo, para instalar la versi√≥n en desarrollo de regutools, el paquete desarrollado por miembros de la CDSB, usaremos el comando remotes::install_bioc(&quot;regutools&quot;) 9.7 Instalando paquetes desde GitHub Para poder instalar un paquete desde GitHub necesitaremos conocer el usuario del creador y el nombre del repositorio. remotes::install_github(&quot;usuario/repositorio&quot;) Por ejemplo, para instalar el paquete starwarssay desarrollado por Erick Cuevas (Erickcufe) utilizaremos el siguiente comando: remotes::install_github(&quot;Erickcufe/starwarssay&quot;) Independientemente de si el paquete se encuentra en CRAN, Bioconductor, o ninguno de ellos, podemos instalar un paquete depositado en una cuenta de GitHub. Para poder instalar un paquete desde GitHub necesitaremos conocer el usuario del creador y el nombre del repositorio donde se encuentra depositado el paquete. Con esta informaci√≥n usaremos la siguiente funci√≥n: 9.8 Instalando un paquete local Paso 1: Abre el proyecto del paquete que est√°s desarrollando. Paso opcional: Ejecuta la documentaci√≥n si realizaste alg√∫n cambio. devtools::document() Paso 2: Construye el paquete: devtools::build() Paso 3: Instala el paquete desde tu proyecto actual: devtools::install() 9.9 Contribuyendo c√≥digo Una ventaja de descargar el paquete de forma local es que puedes realizar cambios, probar que funciona de manera local y despu√©s contribuir (haciendo un pull-request). Usemos el paquete saludo Clona el repositorio en tu computadora. git clone https://github.com/ComunidadBioInfo/saludo.git Ahora puedes abrir el proyecto del paquete y agregar tu c√≥digo. "],["creaci√≥n-de-sitios-web-con-pkgdown.html", "10 Creaci√≥n de sitios web con pkgdown 10.1 Diapositivas 10.2 Instalaci√≥n 10.3 Configura el paquete para crear el sitio con pkgdown 10.4 Genera la estructura de pkgdown 10.5 Pre-visualiza el sitio de manera local 10.6 Personalizando el _pkgdown.yml 10.7 Las variables bslib 10.8 Layout 10.9 Accessibilidad 10.10 La p√°gina de inicio 10.11 La p√°gina de referencias 10.12 Articles 10.13 News 10.14 Publicando el sitio web", " 10 Creaci√≥n de sitios web con pkgdown Joselyn Cristina Ch√°vez Fuentes 31 de octubre de 2024 10.1 Diapositivas div.grey { background-color: #bfbfbf; } div.center { text-align:center; } 10.2 Instalaci√≥n install.packages(&quot;pkgdown&quot;) 10.3 Configura el paquete para crear el sitio con pkgdown Este paso se ejecuta solamente una vez, dentro del proyecto del paquete. usethis::use_pkgdown_github_pages() Este paso genera las acciones autom√°ticas de GitHub para renderizar el sitio. El archivo README.md ser√° tu p√°gina de inicio, la documentaci√≥n en man/ va a crear una secci√≥n de referencias, y las vi√±etas ser√°n renderizadas como articles. 10.4 Genera la estructura de pkgdown Este paso se ejecuta solamente una vez. usethis::use_pkgdown() 10.5 Pre-visualiza el sitio de manera local Este paso lo puedes ejecutar para visualizar el sitio cada vez que hagas una modificaci√≥n, antes de enviar los cambios a GitHub. pkgdown::build_site() 10.6 Personalizando el _pkgdown.yml 10.6.1 Metadatos URL Este es el link donde se va a renderizar el sitio, revisa que sea correcto y, de ser necesario, actual√≠zalo. url: https://pkgdown.r-lib.org template Esta secci√≥n permite personalizar la apariencia general del sitio. template: bootstrap: 5 bootswatch: cerulean 10.6.2 Temas Light switch Puedes proporcionar un ‚Äúlight switch‚Äù para permitir a tus usuarios cambiar entre temas oscuros y claros configurando la opci√≥n de light-switch a true: template: light-switch: true Bootswatch themes La forma m√°s f√°cil de cambiar toda la apariencia de tu sitio web es usar un tema de Bootswatch: template: bootstrap: 5 bootswatch: materia Puedes ver los temas disponibles en https://bootswatch.com/ Estos temas suelen no ser compatibles con el light switch, pero puedes intentar. Al cambiar el bootswatch theme necesitas renderizar el sitio para ver por completo los efectos del tema. build_site() Mientras est√°s experimentando, puedes acelerar las cosas simplemente reconstruyendo la p√°gina de inicio y el CSS ejecutando: build_home_index() init_site() y luego actualizando el navegador. Los bootswatch theme con barras de navegaci√≥n altas (lux, pulse) tambi√©n requieren que se modifique la variable pkgdown-nav-height. Debido a que los temas de bootswatch son proporcionados por el paquete bslib, se puede anidar el campo bootswatch debajo del campo bslib. template: bootstrap: 5 bslib: bootswatch: lux pkgdown-nav-height: 100px 10.7 Las variables bslib Hay tres variables clave que afectan al color: bg (fondo) determina el fondo de la p√°gina. fg (primer plano) determina el color del texto. primary establece el color del enlace y el color transl√∫cido en la barra de navegaci√≥n y la barra lateral. template: bootstrap: 5 bslib: bg: &quot;#202123&quot; fg: &quot;#B8BCC2&quot; primary: &quot;#306cc9&quot; Tambi√©n se pueden personalizar las fuentes predeterminadas utilizadas para la mayor√≠a del texto (base_font), para los encabezados (heading_font) y para el c√≥digo (code_font). La forma m√°s f√°cil es proporcionar el nombre de una fuente de Google con la siguiente sintaxis: template: bootstrap: 5 bslib: base_font: {google: &quot;Roboto&quot;} heading_font: {google: &quot;Roboto Slab&quot;} code_font: {google: &quot;JetBrains Mono&quot;} 10.7.1 Syntax highlighting Los colores utilizados para el resaltado de sintaxis en bloques de c√≥digo est√°n controlados por la configuraci√≥n theme: template: bootstrap: 5 theme: breeze-light Puedes elegir entre: a11y-dark, a11y-light, arrow-dark, arrow-light, atom-one-dark, atom-one-light, ayu-dark, ayu-light, ayu-mirage, breeze-dark, breeze-light, breezedark, dracula, espresso, github-dark, github-light, gruvbox-dark, gruvbox-light, haddock, kate, monochrome-dark, monochrome-light, monochrome, monokai, nord, oblivion, printing, pygments, radical, solarized-dark, solarized-light, solarized, tango, vim-dark, zenburn. 10.7.2 Navbar style Los campos bg y type de la barra de navegaci√≥n controlan los colores del fondo y el primer plano respectivamente. Normalmente bg ser√° light, dark, o primary: navbar: bg: primary 10.8 Layout Puedes personalizar el contenido de la barra de navegaci√≥n, pie de p√°gina, utilizando los campos navbar y footer. Todos ellos utilizan una estructura similar que define por separado la estructura global y los componentes individuales. 10.8.1 Navbar Esta es la estructura default: navbar: structure: left: [intro, reference, articles, tutorials, news] right: [search, github, lightswitch] intro: ‚ÄúGet Started‚Äù, enlaza a una vi√±eta o art√≠culo con el mismo nombre que el paquete. reference: si hay archivos . Rd. articles: si hay vi√±etas o art√≠culos. tutorials: si hay alg√∫n tutorial. news: si existe NEWS.md. search: la barra de b√∫squeda. github: un enlace al repositorio de origen (con un icono), es determinado autom√°ticamente a partir del archivo DESCRIPTION. lightswitch; un ‚Äúinterruptor de luz‚Äù para seleccionar el modo claro, modo oscuro o modo autom√°tico. Puedes utilizar el campo structure para reorganizar la barra de navegaci√≥n: navbar: structure: left: [search] right: [reference, articles] Puedes usar la misma sintaxis para organizar el men√∫ de art√≠culos: navbar: components: articles: text: Articles menu: - text: Category A - text: Title A1 href: articles/a1.html - text: Title A2 href: articles/a2.html - text: ------- - text: &quot;Category B&quot; - text: Article B1 href: articles/b1.html 10.8.2 Footer Esta es la estructura por defecto:: footer: structure: left: developed_by right: built_with Que utiliza dos de los tres componentes incorporados: developed_by: una frase que describe a los principales autores del paquete. built_with: una frase que hace publicidad de la misma. package: el nombre del paquete. Puedes personalizar la organizaci√≥n del pie de p√°gina: footer: structure: left: pkgdown right: [developed_by, legal] components: legal: Provided without **any warranty**. 10.9 Accessibilidad Las configuraciones default de pkgdown tratan de hacer el sitio lo m√°s accesible posible para todos, pero hay algunos puntos a tomar en cuenta: 10.9.1 Colores Si ajustas cualquier color del tema default, verifica que el contraste entre el fondo y el primer plano no haga dif√≠cil leer ning√∫n texto. Puedes utilizar la herramienta de evaluaci√≥n de accessibilidad en https://wave.webaim.org. El color default genera un contraste demasiado bajo contra el fondo gris p√°lido de la barra de navegaci√≥n. Este color viene de la paleta ‚Äúdanger‚Äù de bootstrap, as√≠ que puedes arreglarlo sobreescribiendo esa variable en tu _pkgdown.yml: template: bootstrap: 5 bslib: danger: &quot;#A6081A&quot; Si utilizas entradas de barra de navegaci√≥n personalizadas que s√≥lo muestran un icono, aseg√∫rate de utilizar tambi√©n el campo aria-label para proporcionar una etiqueta accesible que describa el icono. cran: icon: fab fa-r-project href: https://cloud.r-project.org/package=pkgdown aria-label: View on CRAN 10.9.2 Im√°genes Para hacer tu sitio completamente accessible, agrega una descripci√≥n del contenido de las im√°genes en las vi√±etas usando el campo ‚Äúfig.alt‚Äù de las opciones del chunk de R. 10.10 La p√°gina de inicio Los contenidos del home page son autom√°ticamente generados desde el archivo index.md o el README.md. pkgdown les asigna diferentes prioridades, por lo que es possible tener contenidos diferentes en el repositorio de GitHub y la p√°gina de pkgdown si provees ambos archivos. La p√°gina de inicio tambi√©n incluye una barra de contenidos con links importantes, como la gu√≠a de contribuci√≥n, el c√≥digo de conducta, etc. 10.11 La p√°gina de referencias pkgdown crea una p√°gina de referencia en reference/ para cada una de las funciones del paquete, basado en la documentaci√≥n. pkgdown ejecuta todos los ejemplos de las funciones, insertando los resultados renderizados en los archivos HTML generados. Por defecto, pkgdown genera un √≠ndice de referencia que es s√≥lo una lista de funciones ordenadas alfab√©ticamente. El √≠ndice es mucho m√°s √∫til con la curaci√≥n manual porque las funciones pueden agruparse y describirse en categor√≠as. Cada entrada de referencia puede adoptar una de las tres formas siguientes: Un t√≠tulo, definido por los campos title y desc (descripci√≥n) opcionales. Un subt√≠tulo, definido por los campos de subt√≠tulo y desc (descripci√≥n) opcionales. Lista de temas definidos por un campo de contenido. Mientras editas el √≠ndice de referencias, puedes ejecuar la siguiente funci√≥n para renderizar solamente el √≠ndice, lo que permite ver de forma r√°pida el efecto de los cambios sin tener que renderizar todo el sitio. pkgdown::build_reference_index() reference: - title: &quot;Connecting to Spark&quot; desc: &gt; Functions for installing Spark components and managing connections to Spark contents: - spark_config - spark_connect - spark_disconnect - spark_install - spark_log 10.12 Articles pkgdown crear√° autom√°ticamente todas las vi√±etas que se encuentran en la carpeta vignettes/, traduci√©ndolas a archivos HTML en articles/. Se puede nombrar el art√≠culo de introducci√≥n con el nombre del paquete para generar una p√°gina ‚ÄúGet Started‚Äù autom√°ticamente. 10.13 News Si el archivo NEWS.md est√° presente, se procesar√° en un changelog de una sola p√°gina basado en los t√≠tulos de las secciones del archivo. pkgdown asume que el archivo NEWS.md est√° formateado con encabezados de nivel uno (#) para especificar el nombre del paquete y el n√∫mero de versi√≥n, y con encabezados de nivel dos (##) para proporcionar una organizaci√≥n tem√°tica para cada versi√≥n. # pkgdown 1.1.0 ## Bug Fixes * Lots of them 10.14 Publicando el sitio web Haz commit de los cambios y luego push. Ve al repositorio del paquete en GitHub y espera a que la acci√≥n de GitHub termine de renderizar el sitio. Ve al sitio web, el formato debe ser similar a https://usuario.github.io/paquete "],["proyectos-colaborativos-1.html", "11 Proyectos colaborativos 11.1 Propuesta 1 11.2 Propuesta 2 11.3 Propuesta 3 11.4 Propuesta 4 11.5 Propuesta 5", " 11 Proyectos colaborativos 11.1 Propuesta 1 11.2 Propuesta 2 11.3 Propuesta 3 11.4 Propuesta 4 11.5 Propuesta 5 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
